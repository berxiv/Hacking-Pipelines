   _____                     _       _____                 
  / ____|                   | |     |  __ \                
 | (___   ___  __ _ _ __ ___| |__   | |__) |_ _  __ _  ___ 
  \___ \ / _ \/ _` | '__/ __| '_ \  |  ___/ _` |/ _` |/ _ \
  ____) |  __/ (_| | | | (__| | | | | |  | (_| | (_| |  __/
 |_____/ \___|\__,_|_|  \___|_| |_| |_|   \__,_|\__, |\___|
                                                 __/ |     
                                                |___/      



===================================================

1. INITIAL RECON & SETUP
------------------------
[ ] Identify Search Technology
    - Steps:
        1. Open DevTools > Network tab.
        2. Perform a search and note all network requests.
        3. Identify REST, GraphQL, WebSocket, or search API endpoints.
    - Look for: Exposed APIs, third-party search services.

[ ] Fingerprint Framework / Backend
    - Steps:
        1. Inspect HTML/JS for framework hints (e.g., ElasticSearch, Solr, MeiliSearch).
        2. Note version numbers for CVE search.
    - Look for: Outdated components or public version info.

2. INPUT VALIDATION TESTING
---------------------------
[ ] Reflected XSS in Search Results
    - Steps:
        1. Search:
            <script>alert(1)</script>
            <img src=x onerror=alert(1)>
        2. Check titles, snippets, highlights, and page metadata.
    - Look for: Script execution.

[ ] Stored XSS via Indexed Content
    - Steps:
        1. Insert payload into content that will be indexed (profile, post, product).
        2. Search for it later.
    - Look for: Payload executing in other users’ results.

[ ] HTML Injection in Search Output
    - Steps:
        1. Search: <b>bold</b>, <iframe src=evil.com>
    - Look for: HTML rendered.

[ ] JavaScript Link Injection
    - Steps:
        1. Search: [Click Me](javascript:alert(1))
    - Look for: Clickable malicious links in results.

[ ] Search Query Injection (SQL / NoSQL / Lucene)
    - Steps:
        1. Search:
            ' OR 1=1--
            {"$ne": null}
        2. Observe server errors or abnormal results.
    - Look for: Injection or query manipulation.

[ ] Command Injection via Search Backend
    - Steps:
        1. Search: ; ping -c 5 attacker.com
        2. Monitor Collaborator for callbacks.
    - Look for: Outbound calls from server.

3. AUTOCOMPLETE & SUGGESTION TESTING
------------------------------------
[ ] Reflected XSS in Suggestions
    - Steps:
        1. Type partial payload into search box.
        2. Inspect dropdown HTML.
    - Look for: Script execution.

[ ] Data Leakage via Suggestions
    - Steps:
        1. Type a single letter and inspect suggestions.
    - Look for: Sensitive terms or unpublished data.

[ ] SSRF via Suggestion/Preview
    - Steps:
        1. Input URL in search if preview fetches external resources.
    - Look for: Server fetching internal URLs.

4. AUTHENTICATION & AUTHORIZATION
---------------------------------
[ ] Search Access Control
    - Steps:
        1. Compare results logged in vs logged out.
    - Look for: Private data exposed to unauthenticated users.

[ ] IDOR in Search Filters
    - Steps:
        1. Manipulate filter params (user_id, tenant_id).
    - Look for: Access to other users’ results.

[ ] Privilege Escalation via Search Parameters
    - Steps:
        1. Try admin=true or role=admin in query.
    - Look for: Restricted content.

5. API & ENDPOINT TESTING
-------------------------
[ ] Unauthenticated API Calls
    - Steps:
        1. Call search API endpoint directly without auth token.
    - Look for: Data returned.

[ ] CORS Misconfigurations
    - Steps:
        1. Send preflight request with Origin: attacker.com.
    - Look for: Access-Control-Allow-Origin: *.

[ ] CSRF on Search API
    - Steps:
        1. Create HTML form pointing to /search endpoint.
    - Look for: Victim performs search without consent.

[ ] Rate Limiting Bypass
    - Steps:
        1. Rapid-fire search queries.
    - Look for: No throttling.

6. PAGINATION & DATA DUMPING
----------------------------
[ ] Large Page Size Abuse
    - Steps:
        1. Set per_page=9999 in request.
    - Look for: Massive data leakage.

[ ] Enumerate All Data
    - Steps:
        1. Loop through pages with small increments.
    - Look for: Ability to scrape entire dataset.

7. BUSINESS LOGIC FLAWS
-----------------------
[ ] Search Operator Abuse
    - Steps:
        1. Try advanced operators (site:, filetype:, range:).
    - Look for: Internal or restricted documents.

[ ] Ranking/Ordering Manipulation
    - Steps:
        1. Manipulate sort= or order= params.
    - Look for: Force sensitive results to top.

[ ] Search Cache Poisoning
    - Steps:
        1. Inject content in query string and force cache.
    - Look for: Altered search results for other users.

8. FILE & MEDIA HANDLING IN SEARCH
----------------------------------
[ ] Dangerous File Previews
    - Steps:
        1. Search for uploaded files and preview them.
    - Look for: Script execution in preview.

[ ] Content-Type Mismatch in Downloads
    - Steps:
        1. Download file from search results.
    - Look for: Served as text/html instead of safe type.

9. SECURITY HEADERS & CONFIGURATION
-----------------------------------
[ ] Missing CSP
    - Steps:
        1. Check response headers for Content-Security-Policy.
    - Look for: Missing or weak policies.

[ ] Insecure Cache-Control
    - Steps:
        1. Inspect Cache-Control headers.
    - Look for: Sensitive results cached publicly.

10. ERROR HANDLING & DEBUG INFO
-------------------------------
[ ] Verbose Error Messages
    - Steps:
        1. Search with special characters or long strings.
    - Look for: Stack traces, SQL errors.

[ ] Information Disclosure via Highlighting
    - Steps:
        1. Observe highlight JSON or HTML.
    - Look for: Leaked fields.

11. ADVANCED / EDGE CASE TESTING
--------------------------------
[ ] Unicode Bypass
    - Steps:
        1. Use homoglyphs or %u202E in queries.
    - Look for: Filter evasion.

[ ] Double Encoding
    - Steps:
        1. Encode payload twice.
    - Look for: WAF bypass.

[ ] Timing Attacks
    - Steps:
        1. Inject time-based payloads and measure delay.
    - Look for: Blind injection.

===================================================
